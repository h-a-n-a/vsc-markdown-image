{
  "markdown-image.title": "Markdown Image",
  "markdown-image.command.paste": "Paste Image",
  "markdown-image.command.config": "Markdown Image Config Setting",
  "markdown-image.command.paste-rich-text": "Paste Rich Text (Beta)",
  "markdown-image.base.uploadMethod": "Method to upload pictures.",
  "markdown-image.base.uploadMethod.GitHub": "Upload the image to git repository in GitHub.com . You can configure the repository through markdown-image.github.repository. You need to configure the Token to access the repository through markdown-image.github.token.",
  "markdown-image.base.uploadMethods": "Multiple upload services are used for concurrent uploading. The default is empty. The list should contain the selectable values of the `#markdown-image.base.uploadMethod#` option mentioned above. The upload results from the configured upload methods will not be inserted into the Markdown file.",
  "markdown-image.base.fileNameFormat": "The filenname and path format string for upload. You can use some variables: \n\n- `${filename}`: The original filename.  \n- `${mdname}`: The name of the Markdown file being edited.  \n- `${path}`: The path of the Markdown file being edited relative to the root directory.  \n- `${hash}`: The sha256 hash of image.  \n- `${timestamp}`: The timestamp of upload time.  \n- `${YY}`: The Year  \n- `${MM}`:The Month  \n- `${DD}`: The Day  \n- `${hh}`: The 12-hour clock  \n- `${HH}`: The 24-hour clock  \n- `${mm}`: The minutes  \n- `${ss}`: The seconds  \n- `${mss}`: The milliseconds  \n- `${rand,number}`: A random number, for example: `${rand,100}`. It will generate random numbers from 0 to 99 \n- `${prompt}`: Makes it possible to enter a custom name through an input prompt when pasting the image.",
  "markdown-image.base.urlEncode": "Whether URL encode for the url of image.",
  "markdown-image.base.fileFormat": "The Clipboard Image File Format. You can use `png` or `jpg`.",
  "markdown-image.base.codeType": "The type of image code",
  "markdown-image.base.codeType.Markdown": "Markdown Code as: ![image](./image/file/path.jpg)",
  "markdown-image.base.codeType.HTML": "HTML Code as: <img alt=\"image\" src=\"./image/file/path.jpg\" />",
  "markdown-image.base.codeType.DIY": "Custom image code, you need to configure the code format through `#markdown-image.base.codeFormat#`.",
  "markdown-image.base.codeFormat": "The format of custom image code, need to set `#markdown-image.base.codeType#` to `DIY`. You can use `${src}` and `${alt}` variables, which represent the image address and default placeholder (defined by `#markdown-image.base.altFormat#`). For example: `![${alt}](${src})`. You can also use all variables in `#markdown-image.base.fileNameFormat#`.",
  "markdown-image.base.imageWidth": "The maximum width of the image, if the image is greater than this width, the width is set to this value. Set to `0` means not change.",
  "markdown-image.base.altFormat": "Placeholder for Markdown code. You have some variables available: \n\n- ${filename}: The original filename of the image. \n- ${mdname}: The name of the Markdown file being edited (without the extension). \n- ${hash}: The sha256 hash of the image. \n- ${timestamp}: The timestamp of the upload time. \n- ${YY}: The year \n- ${MM}: The month \n- ${DD}: The date \n- ${hh}: The hour in 12-hour format \n- ${HH}: The hour in 24-hour format \n- ${mm}: The minute \n- ${ss}: The second \n- ${mss}: The millisecond \n- ${rand,number}: Random number, for example: ${rand,100}. It will generate a random number from 0 to 99. \n- ${index}: The index of the image pasted into the file by the plugin.\n- `${prompt}`: enter a custom name through an input prompt.",
  "markdown-image.base.altFormat.default": "picture ${index}",
  "markdown-image.local.path": "Picture storage directory that in the local (automatically created if it does not exist). Notice: You can't use variable in here. You can use variable in `#markdown-image.base.fileNameFormat#`.",
  "markdown-image.local.referencePath": "The reference path format in markdown(not include file name). Empty means use relative path. You can use variable of `#markdown-image.base.fileNameFormat#` in here. For example: `/images/${YY}-${MM}/`",
  "markdown-image.github.scope": "The scope/project name for organizing uploaded images. This will be used as a prefix in the upload path, like `/{scope}/assets/`. Choose the appropriate scope for your project.",
  "markdown-image.github.path": "Picture upload directory that in the repository (automatically created if it does not exist). The repository must initialization first. This path will be combined with the scope, final path will be `/{scope}{path}`.",
  "markdown-image.github.token": "GitHub person [access token](https://github.com/settings/tokens).",
  "markdown-image.github.repository": "GitHub repository, for example: `https://github.com/username/repository`",
  "markdown-image.github.branch": "GitHub repository branch to save.",
  "markdown-image.github.cdn": "The github cdn address format to be used, `${username}` is the username of `#markdown-image.github.repository#`, and `${repository}` is the repository name. `${branch}` is the value of `#markdown-image.github.branch#`. `${filepath}` is the upload path in repository.",
  "markdown-image.github.httpProxy": "Connect to Github via http proxy.",
  "markdown-image.DIY.path": "The Code File Path. You can write a Node.js code file to upload, and fill in the file path to here. Your code must exports a function as `async function (filePath:string, savePath:string, markdownPath:string):string`.\n\nFor example: \n\n ```javascript\nconst path = require('path');\nmodule.exports = async function(filePath, savePath, markdownPath) {\n\t// Return a picture access link\n\treturn path.relative(path.dirname(markdownPath), filePath); \n}\n```\nThe arguments are :\n- `filePath`: The absolute path of the file.  \n- `savePath`: The path of the saved file generate according to `#markdown-image.base.fileNameFormat#`.  \n- `markdownPath`: The path of markdown file being edited."
}
